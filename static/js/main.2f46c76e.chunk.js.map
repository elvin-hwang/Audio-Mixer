{"version":3,"sources":["controllers/soundManager.js","controllers/soundController.js","components/SoundButtons.js","controllers/commandParser.js","controllers/commandController.js","controllers/effectParser.js","components/SoundTable.js","components/PlayButton.js","components/InputForm.js","components/Commands.js","components/Navigation.js","components/DSLPage.js","App.js","serviceWorker.js","index.js","sounds/trump-A-Million-Dollars.wav","sounds/trump-America.wav","sounds/trump-bigger.wav","sounds/trump-Im-Really-Rich.wav","sounds/atmosphere.wav","sounds/atmosphereHigh.wav","sounds/buildup.wav","sounds/drop.wav","sounds/hat.wav","sounds/HighChorus.wav","sounds/kick.wav","sounds/lofiDrum.wav","sounds/MidChorus.wav","sounds/organ.wav","sounds/snare.wav","sounds/snareBuild.wav","sounds/SynthChorus.wav","sounds/Wobble.wav","sounds/buong.wav","sounds/electroChorus.wav","sounds/PianoBackground.wav","sounds/PianoChorus.wav","sounds/shakerLoop.wav","components/dsl.png"],"names":["audioCtx","window","AudioContext","webkitAudioContext","soundManager","SoundManager","this","sounds","playlist","finishedPlaying","sound","name","event","push","Object","keys","map","key","buffer","soundBuffer","source","createBufferSource","playbackRate","value","soundMods","speed","onended","endedHandler","bind","connect","gainNode","destination","refreshPlaylist","start","stop","length","displaySounds","TrumpMillionDollar","Audio","TrumpAmerica","TrumpBigger","TrumpRich","Atmosphere","AtmosphereHigh","BuildUp","Drop","HighChorus","Hat","Kick","Snare","LofiDrum","MidChorus","Organ","SnareBuild","SynthChorus","Wobble","allSounds","Buong","ElectroChorus","PianoBackground","PianoChorus","ShakerLoop","load","require","util","Sound","id","pos","mods","getGainNode","color","Math","random","setUpAudio","then","result","catch","error","file","toLowerCase","interval","newLength","duration","resize","sampleRate","repeat","ceil","leftShift","leftPad","createBuffer","concat","totalDuration","console","log","createGain","gain","volume","SoundButtons","props","state","play","onloadeddata","audDuration","obj","setState","entries","className","s","Button","onClick","variant","size","round","Component","processCommand","command","startsWith","input","effects","split","soundInfo","data","soundID","soundName","infoList","soundPos","trim","parseSoundName","replace","isNaN","parseFloat","parseFirstInfo","shift","effect","parseEffect","parseEffects","addSound","removeSound","clearSounds","info","match","tokens","getFloat","vol","parseInt","val","e","SoundTable","soundLines","containerRef","React","createRef","getRectsInterval","undefined","setInterval","containerRect","current","getBoundingClientRect","getSoundLines","clearInterval","i","canvas","index","Array","fill","el","left","soundList","ref","renderLines","VerticalLine","style","SoundLine","lineData","scrollYOffset","pageYOffset","document","documentElement","body","parentNode","scrollTop","dataList","ratio","width","top","yOffset","height","yPos","startPos","lengthWidth","durationWidth","endPosition","right","x0","x1","y","intervalWidth","maxWidth","getData","y0","y1","borderColor","borderWidth","borderStyle","SoundLabels","PlayButton","playing","display","time","stopSounds","playSounds","timerID","tick","isAudioPlaying","isPlaying","timer","Date","now","class","playOrPause","type","marginRight","displayTime","toFixed","InputForm","commandOutput","commandInput","handleSubmit","handleChange","target","output","preventDefault","commands","commandList","cmd","executeCommands","toLocaleString","text","DSLCommand","Form","onSubmit","Group","controlId","Label","Control","as","rows","onChange","Text","slice","reverse","c","Commands","Navigation","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Nav","Link","DSLPage","Figure","Image","src","DSL","Caption","App","basename","path","component","exact","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.2f46c76e.chunk.js","sourcesContent":["// https://sampleswap.org/ <- has a wide sample of sounds, should discuss what to put in\n\n// https://codepen.io/Rumyra/pen/qyMzqN/ <- pretty useful guide to see how AudioContext works\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API <- documentation\nconst AudioContext = window.AudioContext || window.webkitAudioContext\nexport const audioCtx = new AudioContext()\n\n// Singleton class\n// Need a UI Component for this class, the table and play/pause\nclass SoundManager {\n    constructor() {\n        if (!SoundManager.soundManager) {\n            this.sounds = {} // Dictionary of {name, Sound}\n            this.playlist = [] // Array of sound sources\n            this.finishedPlaying = [];\n            SoundManager.soundManager = this\n        }\n    }\n\n    addSound(sound) {\n        this.sounds[sound.name] = sound\n    }\n\n    endedHandler(event) {\n        this.finishedPlaying.push(true);\n    }\n\n    refreshPlaylist() {\n        this.playlist = [];\n        this.finishedPlaying = [];\n        Object.keys(this.sounds).map(key => {\n            let sound = this.sounds[key]\n            let buffer = sound.soundBuffer\n            let source = audioCtx.createBufferSource()\n            source.buffer = buffer\n            source.playbackRate.value = sound.soundMods.speed\n            source.onended = this.endedHandler.bind(this);\n            source.connect(sound.gainNode).connect(audioCtx.destination)\n            this.playlist.push(source);\n        });\n    }\n\n    playSounds() {\n        this.refreshPlaylist();\n        for (const sound of this.playlist) {\n            sound.start();\n        }\n    }\n\n    stopSounds() {\n        // TODO Make this work https://stackoverflow.com/questions/31644060/how-can-i-get-an-audiobuffersourcenodes-current-time\n        for (const sound of this.playlist) {\n            sound.stop();\n        }\n    }\n\n    isPlaying() {\n        return this.finishedPlaying.length != this.playlist.length;\n    }\n\n    removeSound(name) {\n        if (this.sounds[name]) {\n            delete this.sounds[name]\n            return true\n        }\n        return false\n    }\n\n    clearSounds() {\n        this.sounds = {}\n    }\n}\n\nconst soundManager = new SoundManager()\n\nexport default soundManager\n","import TrumpMillionDollar from '../sounds/trump-A-Million-Dollars.wav'\nimport TrumpAmerica from '../sounds/trump-America.wav'\nimport TrumpBigger from '../sounds/trump-bigger.wav'\nimport TrumpRich from '../sounds/trump-Im-Really-Rich.wav'\n\nimport Atmosphere from '../sounds/atmosphere.wav'\nimport AtmosphereHigh from '../sounds/atmosphereHigh.wav'\nimport BuildUp from '../sounds/buildup.wav'\nimport Buong from '../sounds/buong.wav'\nimport Drop from '../sounds/drop.wav'\nimport ElectroChorus from '../sounds/electroChorus.wav'\nimport Hat from '../sounds/hat.wav'\nimport HighChorus from '../sounds/HighChorus.wav'\nimport Kick from '../sounds/kick.wav'\nimport LofiDrum from '../sounds/lofiDrum.wav'\nimport MidChorus from '../sounds/MidChorus.wav'\nimport Organ from '../sounds/organ.wav'\n\nimport PianoBackground from '../sounds/PianoBackground.wav'\nimport PianoChorus from '../sounds/PianoChorus.wav'\nimport ShakerLoop from '../sounds/shakerLoop.wav'\nimport Snare from '../sounds/snare.wav'\nimport SnareBuild from '../sounds/snareBuild.wav'\nimport SynthChorus from '../sounds/SynthChorus.wav'\nimport Wobble from '../sounds/Wobble.wav'\n\n\nimport { audioCtx } from './soundManager'\n\n// When adding new sounds, try to keep id to simple strings\nexport const displaySounds = {\n    TrumpMillionDollar: new Audio(TrumpMillionDollar),\n    TrumpAmerica: new Audio(TrumpAmerica),\n    TrumpBigger: new Audio(TrumpBigger),\n    TrumpRich: new Audio(TrumpRich),\n    Atmosphere: new Audio(Atmosphere),\n    AtmosphereHigh: new Audio(AtmosphereHigh) ,\n    BuildUp: new Audio(BuildUp),\n    // Buong: new Audio(Buong),\n    Drop: new Audio(Drop),\n    // ElectroChorus: new Audio(ElectroChorus),\n    HighChorus: new Audio(HighChorus),\n    Hat: new Audio(Hat),\n    Kick: new Audio(Kick),\n    Snare: new Audio(Snare),\n    LofiDrum: new Audio(LofiDrum),\n    MidChorus: new Audio(MidChorus),\n    Organ: new Audio(Organ),\n    \n    // PianoBackground: new Audio(PianoBackground),\n    // PianoChorus: new Audio(PianoChorus),\n    // ShakerLoop: new Audio(ShakerLoop),\n    SnareBuild: new Audio(SnareBuild),\n    SynthChorus: new Audio(SynthChorus),\n    Wobble: new Audio(Wobble),\n}\n\nconst allSounds = {\n    TrumpMillionDollar: TrumpMillionDollar,\n    TrumpAmerica: TrumpAmerica,\n    TrumpBigger: TrumpBigger,\n    TrumpRich: TrumpRich,\n    Atmosphere: Atmosphere,\n    AtmosphereHigh: AtmosphereHigh ,\n    BuildUp: BuildUp,\n    Buong: Buong,\n    Drop: Drop,\n    ElectroChorus: ElectroChorus,\n    Hat: Hat,\n    HighChorus: HighChorus,\n    Kick: Kick,\n    LofiDrum: LofiDrum,\n    MidChorus: MidChorus,\n    Organ: Organ,\n    \n    PianoBackground: PianoBackground,\n    PianoChorus: PianoChorus,\n    ShakerLoop: ShakerLoop,\n    Snare: Snare,\n    SnareBuild: SnareBuild,\n    SynthChorus: SynthChorus,\n    Wobble: Wobble,\n}\n\nconst load = require('audio-loader')\nconst util = require('audio-buffer-utils')\n\nexport class Sound {\n    constructor(id, pos, name, mods) {\n        this.id = id\n        this.pos = pos\n        this.name = name\n        this.soundMods = mods\n        this.gainNode = this.getGainNode()\n        this.color = 'hsl(' + Math.random() * 360 + ', 100%, 75%)'\n        this.setUpAudio()\n            .then(result => {\n                this.soundBuffer = result\n            })\n            .catch(error => {\n                throw 'Error while setting up Audio: ' + error\n            })\n    }\n\n    setUpAudio() {\n        let file = null\n        Object.keys(allSounds).map(key => {\n            if (key.toLowerCase() == this.id.toLowerCase()) {\n                this.id = key;\n                file = allSounds[key]\n            }\n        })\n\n        if (!file) throw 'Invalid sound found: ' + this.id\n\n        return load(file).then(buffer => {\n            if (this.soundMods.length) {\n                if (this.soundMods.interval) {\n                    // pad/trim buffer with time depending on speed and duration of the audio\n                    // Ex Input: 2 second buffer, interval 5 seconds, speed 2x\n                    // calculate new buffer duration, x = buffer.duration + (interval * speed - buffer.duration)\n                    let newLength = buffer.duration + this.soundMods.interval * this.soundMods.speed - buffer.duration\n                    buffer = util.resize(buffer, buffer.sampleRate * newLength)\n                }\n                // repeat the modified/unmodified buffer for x number of times, where x = ceiling((length / buffer.duration) * speed)\n                // resize the buffer to x, where x = length * speed\n                let repeat = Math.ceil((this.soundMods.length / buffer.duration) * this.soundMods.speed)\n                buffer = util.repeat(buffer, repeat)\n                buffer = util.resize(buffer, buffer.sampleRate * this.soundMods.length * this.soundMods.speed)\n            }\n            // Shift the audio sound by x seconds from the left, where x = (this.pos * speed)\n            let leftShift = this.pos * this.soundMods.speed\n            if (leftShift) {\n                let leftPad = audioCtx.createBuffer(1, audioCtx.sampleRate * leftShift, audioCtx.sampleRate)\n                buffer = util.concat(leftPad, buffer)\n            }\n\n            // If the buffer duration is over x seconds, where x = (60 * speed), trim down to x seconds.\n            let totalDuration = 60 * this.soundMods.speed\n            if (buffer.duration > totalDuration) buffer = util.resize(buffer, buffer.sampleRate * totalDuration)\n\n            return buffer\n        }).catch(error => {\n            console.log(error);\n            return this.setUpAudio();\n        })\n    }\n\n    getGainNode() {\n        const gainNode = audioCtx.createGain()\n        gainNode.gain.value = this.soundMods.volume / 100\n        return gainNode\n    }\n}\n","import { Button } from 'react-bootstrap'\nimport React, { Component } from 'react'\nimport { displaySounds } from '../controllers/soundController'\nimport './styles.css'\n\nclass SoundButtons extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { sounds: [] }\n    }\n\n    onClick(sound) {\n        sound.play()\n    }\n\n    componentDidMount() {\n        for (const [key, value] of Object.entries(displaySounds)) {\n            value.onloadeddata = function () {\n                var audDuration = value.duration\n                let obj = {\n                    name: key,\n                    sound: value,\n                    duration: audDuration,\n                }\n                this.setState({\n                    sounds: [...this.state.sounds, obj],\n                })\n            }.bind(this)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Click here to listen to sounds!</h3>\n                <div className=\"buttons\">\n                    {this.state.sounds.map(s => (\n                        <div key={s.name}>\n                            <Button onClick={() => this.onClick(s.sound)} variant=\"info\" size=\"lg\">\n                                {s.name}\n                            </Button>\n                            <h6>\n                                <small className=\"text-muted\">dur: {Math.round(s.duration * 100) / 100}s</small>\n                            </h6>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\nexport default SoundButtons\n","import { addSound, removeSound, restartPlaylist } from './commandController'\n\nexport function processCommand(command) {\n    if (command.startsWith('Add')) {\n        addSound(command.replace('Add', '').trim())\n    } else if (command.startsWith('Remove')) {\n        let input = command.replace('Remove', '').trim()\n        removeSound(parseSoundName(input))\n    } else if (command.startsWith('Restart')) {\n        command = command.replace('Restart', '').trim()\n        if (command) {\n            throw 'Additional Parameter(s) Found in Restart Command: ' + command\n        }\n        restartPlaylist()\n    } else {\n        throw 'Invalid command found: ' + command\n    }\n    return\n}\n\nexport function parseFirstInfo(data) {\n    let infoList = data.split(' ')\n    let soundID = ''\n    let soundName = ''\n    let soundPos = -1\n\n    if (infoList.length != 5 || infoList[1].trim() != 'as' || infoList[3] != 'at') {\n        throw 'Invalid Parameter in Add: ' + data\n    }\n    soundID = parseSoundName(infoList[0].replace('sound_', '').trim())\n    soundName = parseSoundName(infoList[2])\n    if (!isNaN(infoList[4])) {\n        soundPos = parseFloat(infoList[4])\n    }\n    if (soundPos < 0 || soundPos >= 60) {\n        throw 'Invalid Parameter in Add: ' + data\n    }\n    return { soundID, soundPos, soundName }\n}\n\n/*\n    Parses the sound id given a SOUND DSL\n*/\nfunction parseSoundName(info) {\n    var letters = /^[A-Za-z0-9]+$/\n    if (!info.match(letters)) {\n        throw 'Invalid Sound ID specified: ' + info\n    }\n    return info\n}\n","import { processCommand, parseFirstInfo } from './commandParser'\nimport { parseEffects } from './effectParser'\nimport soundManager from './soundManager'\nimport { Sound } from './soundController'\n\nexport function executeCommands(commands) {\n    // Split each command based on separator\n    let commandList = commands.split(';')\n    for (let cmd of commandList) {\n        cmd = cmd.trim()\n        if (cmd) processCommand(cmd)\n    }\n}\n\n/*\n    Add sound with the given user input\n*/\nexport function addSound(input) {\n    let effects = input.split(',')\n    let soundInfo = parseFirstInfo(effects.shift()) // returns {soundID, soundPos, soundName}\n    let soundMods = parseEffects(effects) // Object soundMods: { length, interval, volume, speed }\n\n    let sound = new Sound(soundInfo.soundID, soundInfo.soundPos, soundInfo.soundName, soundMods)\n    soundManager.addSound(sound)\n}\n\n/*\n    Removes sound with id from the playlist\n*/\nexport function removeSound(id) {\n    if (!soundManager.removeSound(id)) throw 'Invalid ID in Remove Sound: ' + id\n}\n\n/*\n    Resets the whole thingamajig\n*/\nexport function restartPlaylist() {\n    soundManager.clearSounds()\n}\n","export function parseEffects(effects) {\n    let soundMods = {\n        length: null,\n        interval: null,\n        volume: 100,\n        speed: 1.0,\n    }\n    // need to process volume and speed before loop\n    for (let effect of effects) {\n        soundMods = parseEffect(effect, soundMods)\n    }\n    return soundMods\n}\n\nfunction parseEffect(effect, mods) {\n    let tokens = effect.trim().split(' ')\n    if (tokens.length == 0 || tokens.length == 1) {\n        throw 'Invalid Effects: ' + effect\n    }\n    switch (tokens[0].trim()) {\n        case 'length':\n            if (tokens.length != 2 && tokens.length != 4) {\n                throw 'Invalid Parameters in Length: ' + tokens\n            }\n            mods.length = getFloat(tokens[1])\n            if (tokens.length == 4) {\n                mods.interval = getFloat(tokens[3])\n                if (mods.interval >= 60 || mods.interval <= 0) {\n                    throw 'Invalid Parameters in Interval: ' + tokens;\n                }\n            }\n            if (mods.length > 60 || mods.length <= 0) {\n                throw 'Invalid Parameters in Length: ' + tokens\n            }\n            break\n        case 'volume':\n            let vol = parseInt(tokens[1])\n            if (tokens.length != 2 || vol < 0 || vol >= 300) {\n                throw 'Invalid Parameters in Volume: ' + tokens\n            }\n            mods.volume = vol\n            break\n        case 'speed':\n            if (tokens.length != 2) {\n                console.log(tokens)\n                throw 'Invalid Parameters in Speed: ' + tokens\n            }\n            mods.speed = getFloat(tokens[1])\n            if (mods.speed <= 0 || mods.speed >= 3) {\n                console.log(tokens)\n                throw 'Invalid Parameters in Speed: ' + tokens\n            }\n            break\n        default:\n            throw 'Invalid Effect Type: ' + tokens\n    }\n    return mods\n}\n\nfunction getFloat(val) {\n    try {\n        return parseFloat(val)\n    } catch (e) {\n        throw 'Error while parsing float value: ' + val\n    }\n}\n","import React, { Component } from 'react'\nimport soundManager from '../controllers/soundManager'\nimport { displaySounds } from '../controllers/soundController'\nimport { Line } from 'react-lineto'\nimport './styles.css'\n\nclass SoundTable extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = { soundLines: [] }\n        this.containerRef = React.createRef()\n        this.getRectsInterval = undefined\n    }\n\n    componentDidMount() {\n        this.getRectsInterval = setInterval(() => {\n            const containerRect = this.containerRef.current.getBoundingClientRect()\n            this.setState({\n                soundLines: this.getSoundLines(containerRect),\n            })\n        }, 10) // This determines how often the polling occurs in milliseconds\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.getRectsInterval)\n    }\n\n    getSoundLines(containerRect) {\n        // Each sound has a div, and each div has multiple lines\n        return Object.keys(soundManager.sounds).map((key, i) => (\n            <SoundLine sound={soundManager.sounds[key]} canvas={containerRect} index={i + 1} key={key} />\n        ))\n    }\n\n    renderLines() {\n        return Array(15)\n            .fill(null)\n            .map((el, i) => <VerticalLine left={i * 6.7} index={i} key={i} />)\n    }\n\n    render() {\n        return (\n            <div className=\"soundTable\">\n                <SoundLabels soundList={soundManager.sounds} />\n                <div className=\"linesContainer\" ref={this.containerRef}>\n                    <div className=\"soundLabelPadding\" />\n                    {this.renderLines()}\n                    {this.state.soundLines}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst VerticalLine = ({ left, index }) => {\n    let pos = parseInt(index * 4)\n    return (\n        <div className=\"verticalLine\" style={{ left: `${left}%` }}>\n            <p className=\"time\"> {pos}</p>\n        </div>\n    )\n}\n\nconst SoundLine = ({ sound, canvas, index }) => {\n    let lineData = getData(sound, canvas, index)\n    return (\n        <div className=\"soundLineRow\">\n            {lineData.map(data => (\n                <Line\n                    key=\"2\"\n                    x0={data.x0}\n                    y0={data.y}\n                    x1={data.x1}\n                    y1={data.y}\n                    borderColor={sound.color}\n                    borderWidth={5}\n                    borderStyle=\"outset\"\n                />\n            ))}\n        </div>\n    )\n}\n\nconst SoundLabels = ({ soundList }) => {\n    return (\n        <div className=\"soundLabelContainer\">\n            <div className=\"soundLabelPadding\">Time</div>\n            {Object.keys(soundList).map(key => (\n                <div key={key} className=\"soundLabel\">\n                    {key}\n                </div>\n            ))}\n        </div>\n    )\n}\n\nfunction getData(sound, canvas, index) {\n    if (!sound.soundBuffer) return []\n    let scrollYOffset =\n        window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop\n    let dataList = [];\n\n    // Get Pixel to Second conversion ratio\n    let ratio = canvas.width / 60\n\n    // Get Y Position\n    let top = scrollYOffset + canvas.top\n    let yOffset = canvas.height * 0.05 * index + canvas.height * 0.01\n    let yPos = top + yOffset\n\n    // Convert seconds into pixels\n    let startPos = canvas.left + 2 + ratio * sound.pos\n    let lengthWidth = ratio * sound.soundMods.length\n\n    // calculate audio duration:\n    let durationWidth = ratio * displaySounds[sound.id].duration * sound.soundMods.speed\n    \n    if (sound.soundMods.length && !sound.soundMods.interval) {\n        durationWidth = lengthWidth\n    }\n\n    let endPosition = startPos + durationWidth;\n    if (endPosition >= canvas.right) endPosition = canvas.right - 2;\n\n    dataList.push({ x0: startPos, x1: endPosition, y: yPos })\n\n    if (sound.soundMods.interval) {\n        let intervalWidth = ratio * sound.soundMods.interval\n        let maxWidth = startPos + lengthWidth\n        if (maxWidth >= canvas.right) maxWidth = canvas.right - 2;\n        for (let i = startPos + intervalWidth; i < maxWidth; i += intervalWidth) {\n            endPosition = i + durationWidth >= maxWidth ? maxWidth : i + durationWidth\n            dataList.push({ x0: i, x1: endPosition, y: yPos })\n        }\n    }\n\n    return dataList\n}\n\nexport default SoundTable\n","import { Button } from 'react-bootstrap'\nimport React, { Component } from 'react'\nimport soundManager from '../controllers/soundManager'\nimport './styles.css'\n\n// https://reactjs.org/docs/state-and-lifecycle.html\nclass PlayButton extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            playing: false,\n            display: 'Play',\n            time: 0,\n            start: 0,\n        }\n    }\n\n    playOrPause() {\n        if (this.state.playing) {\n            this.stopSounds()\n        } else {\n            this.playSounds()\n        }\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(() => this.tick(), 100)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID)\n    }\n\n    tick() {\n        let isAudioPlaying = soundManager.isPlaying()\n        if (!isAudioPlaying) {\n            clearInterval(this.timer)\n            // this.setState({ time: 0 })\n        }\n        this.setState({\n            playing: isAudioPlaying,\n            display: isAudioPlaying ? 'Stop' : 'Play',\n        })\n    }\n\n    // implement play pause button and maybe reset, and maybe render the red line\n    playSounds() {\n        if (Object.keys(soundManager.sounds).length) {\n            soundManager.playSounds()\n            this.setState({\n                time: 0,\n                start: Date.now(), //Date.now() - this.state.time\n            })\n            this.timer = setInterval(\n                () =>\n                    this.setState({\n                        time: Date.now() - this.state.start,\n                    }),\n                10\n            )\n        }\n    }\n\n    stopSounds() {\n        soundManager.stopSounds()\n        clearInterval(this.timer)\n    }\n\n    displayTime() {\n        return Math.round((this.state.time / 1000) * 100) / 100\n    }\n\n    render() {\n        return (\n            <div class=\"timerContainer\">\n                <Button\n                    onClick={() => this.playOrPause()}\n                    variant=\"success\"\n                    type=\"button\"\n                    style={{ marginRight: '20px' }}\n                >\n                    {this.state.display}\n                </Button>\n                <div class=\"timer\"> {this.displayTime().toFixed(2)} seconds </div>\n            </div>\n        )\n    }\n}\n\nexport default PlayButton\n","import { Form, Button } from 'react-bootstrap'\nimport React, { Component } from 'react'\nimport { executeCommands } from '../controllers/commandController'\nimport soundManager from '../controllers/soundManager'\nimport SoundTable from './SoundTable'\nimport PlayButton from './PlayButton'\nimport './styles.css'\n\nclass InputForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { commandOutput: [], commandInput: '' }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({ commandInput: event.target.value })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        let output;\n        try {\n            executeCommands(this.state.commandInput)\n            output = {\n                time: new Date().toLocaleString(),\n                text: event.target.DSLCommand.value,\n                error: null,\n            }\n        } catch (e) {\n            console.error(e)\n            output = {\n                time: new Date().toLocaleString(),\n                text: event.target.DSLCommand.value,\n                error: e,\n            }\n        }\n        this.setState({\n            commandOutput: [...this.state.commandOutput, output],\n        })\n        this.setState({ commandInput: '' })\n    }\n\n    playSounds() {\n        soundManager.playSounds()\n    }\n\n    render() {\n        return (\n            <div className=\"allContent\">\n                <div className=\"flex-child-input\">\n                    <div className=\"inputform\">\n                        <Form onSubmit={this.handleSubmit}>\n                            <Form.Group controlId=\"DSLCommand\">\n                                <Form.Label>Input DSL Command Here</Form.Label>\n                                <Form.Control\n                                    as=\"textarea\"\n                                    rows=\"10\"\n                                    type=\"text\"\n                                    name=\"DSLCommand\"\n                                    value={this.state.commandInput}\n                                    onChange={this.handleChange}\n                                />\n                                <Form.Text className=\"text-muted\">\n                                    Please enter DSL text commands here\n                                </Form.Text>\n                            </Form.Group>\n                            <Button variant=\"info\" type=\"submit\">\n                                Submit\n                            </Button>\n                        </Form>\n                    </div>\n                    <PlayButton/>\n                    <br />\n                    <h3>Commands History</h3>\n                    <div className=\"commandsHistory\">\n                        {this.state.commandOutput.length == 0 && (\n                            <h5>\n                                <small className=\"text-muted\">You have not executed any commands yet</small>\n                            </h5>\n                        )}\n                        {this.state.commandOutput.slice().reverse().map(c => (\n                            <div key={c}>\n                                {!c.error && (\n                                    <h5>\n                                        <i>\n                                            <small>{c.time}</small>{' '}\n                                        </i>\n                                        <small>{c.text}</small>\n                                    </h5>\n                                )}\n                                {c.error && (\n                                    <h5 className=\"text-danger\">\n                                        <i>\n                                            <small>{c.time}</small>{' '}\n                                        </i>\n                                        <small>{c.error}</small>\n                                    </h5>\n                                )}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <SoundTable class=\"flex-child-table\"></SoundTable>\n            </div>\n        )\n    }\n}\n\nexport default InputForm\n","import React from 'react'\nimport './styles.css'\nimport SoundButtons from './SoundButtons'\nimport InputForm from './InputForm'\n\nfunction Commands() {\n    return (\n        <div className=\"commands\">\n            <SoundButtons></SoundButtons>\n            <InputForm />\n        </div>\n    )\n}\nexport default Commands\n","import React, { Component } from 'react'\nimport { Navbar, Nav } from 'react-bootstrap'\n\nexport class Navigation extends Component {\n    render() {\n        return (\n            <Navbar bg=\"info\" expand=\"lg\">\n                <Navbar.Brand className=\"text-white\" href=\"https://elvin-hwang.github.io/Audio-Mixer/\">\n                    SOUNDAPP\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Nav>\n                    <Nav.Link className=\"d-inline p-2 text-white\" href=\"https://elvin-hwang.github.io/Audio-Mixer/#/dsl\">\n                        Our DSL\n                    </Nav.Link>\n                </Nav>\n            </Navbar>\n        )\n    }\n}\n","import { Figure } from 'react-bootstrap'\nimport DSL from './dsl.png'\nimport React from 'react'\nimport './styles.css'\n\nfunction DSLPage() {\n    return (\n        <div className=\"inputform\">\n            <Figure class=\"figurepic\">\n                <Figure.Image src={DSL} />\n                <Figure.Caption>DSL Example</Figure.Caption>\n            </Figure>\n        </div>\n    )\n}\nexport default DSLPage\n","import React from 'react'\nimport './App.css'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Commands from './components/Commands'\nimport { Navigation } from './components/Navigation'\nimport DSLPage from './components/DSLPage'\nimport style from 'bootstrap/dist/css/bootstrap.css'\n\nfunction App() {\n    return (\n        <Router basename=\"/Audio-Mixer\">\n            <div className=\"App\">\n                <Navigation />\n                <div className=\"App-header\">\n                    <Switch>\n                        <Route path=\"/\" component={Commands} exact />\n                        <Route path=\"/dsl\" component={DSLPage} />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/trump-A-Million-Dollars.e0aac125.wav\";","module.exports = __webpack_public_path__ + \"static/media/trump-America.87d2ed07.wav\";","module.exports = __webpack_public_path__ + \"static/media/trump-bigger.3560f2cc.wav\";","module.exports = __webpack_public_path__ + \"static/media/trump-Im-Really-Rich.fe46ed95.wav\";","module.exports = __webpack_public_path__ + \"static/media/atmosphere.5b163b2d.wav\";","module.exports = __webpack_public_path__ + \"static/media/atmosphereHigh.5a966d8c.wav\";","module.exports = __webpack_public_path__ + \"static/media/buildup.f1514e0d.wav\";","module.exports = __webpack_public_path__ + \"static/media/drop.04530777.wav\";","module.exports = __webpack_public_path__ + \"static/media/hat.afb28490.wav\";","module.exports = __webpack_public_path__ + \"static/media/HighChorus.0df2e0f1.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.5b1bcb70.wav\";","module.exports = __webpack_public_path__ + \"static/media/lofiDrum.ee5fac94.wav\";","module.exports = __webpack_public_path__ + \"static/media/MidChorus.d3e451db.wav\";","module.exports = __webpack_public_path__ + \"static/media/organ.8f4f6a9c.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.91a6ded8.wav\";","module.exports = __webpack_public_path__ + \"static/media/snareBuild.a5462aed.wav\";","module.exports = __webpack_public_path__ + \"static/media/SynthChorus.fc388833.wav\";","module.exports = __webpack_public_path__ + \"static/media/Wobble.6cb16ac1.wav\";","module.exports = __webpack_public_path__ + \"static/media/buong.ba43e9e0.wav\";","module.exports = __webpack_public_path__ + \"static/media/electroChorus.24e14281.wav\";","module.exports = __webpack_public_path__ + \"static/media/PianoBackground.a81654dc.wav\";","module.exports = __webpack_public_path__ + \"static/media/PianoChorus.ace88ae7.wav\";","module.exports = __webpack_public_path__ + \"static/media/shakerLoop.ba6d7136.wav\";","module.exports = __webpack_public_path__ + \"static/media/dsl.25222323.png\";"],"sourceRoot":""}